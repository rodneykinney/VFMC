name: Build and release binaries

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'PyPI version number'
        required: true
        type: string

permissions:
  contents: write  # For creating releases and uploading assets
  id-token: write  # For PyPI trusted publishing

jobs:
  # Build pre-compiled binaries
  build-windows:
    name: Build Windows executable
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.9'
          
      - name: Install Python dependencies
        run: |
          python -m venv .venv
          .\.venv\Scripts\Activate.ps1
          python -m pip install --upgrade pip
          pip install -e .[dev]
          
      - name: Build Windows executable
        run: |
          .\.venv\Scripts\Activate.ps1
          pyinstaller win-x86.spec
          
      - name: Create distribution package
        run: |
          .\.venv\Scripts\Activate.ps1
          cd dist\win-x86
          cp ../../resources/README-win.txt README.txt
          Compress-Archive -Path .\VFMC.exe,.\README.txt -DestinationPath VFMC-v${{ github.event.inputs.version }}-Windows.zip
          
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: VFMC-Windows
          path: dist/win-x86/*.zip

  build-macos-arm:
    name: Build macOS ARM executable
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
      
      - name: Set up Python 3.9
        uses: actions/setup-python@v5
        with:
          python-version: '3.9'
          
      - name: Install Dependencies
        run: |
          python -m venv .venv
          . .venv/bin/activate
          python -m pip install --upgrade pip
          pip install .[dev]

      - name: Build ARM executable
        run: |
          . .venv/bin/activate
          pyinstaller macos-arm.spec
          cd dist/macos-arm
          cp ../../resources/README-mac.txt README.txt
          zip -q VFMC-v${{ github.event.inputs.version }}-Mac-ARM.zip -r README.txt vfmc.app

      - name: Upload ARM build artifact
        uses: actions/upload-artifact@v4
        with:
          name: VFMC-macOS-ARM
          path: dist/macos-arm/*.zip

  # Step 4: Create GitHub release and upload assets
  create-release:
    name: Create release and upload assets
    runs-on: ubuntu-latest
    needs: [build-windows, build-macos-arm]
    steps:
      - uses: actions/checkout@v4
      
      - name: Check if release exists
        id: check_release
        run: |
          RELEASE_TAG="v${{ github.event.inputs.version }}"
          if gh release view "$RELEASE_TAG" &>/dev/null; then
            echo "Release $RELEASE_TAG already exists. Will only update assets."
            echo "EXISTS=true" >> $GITHUB_OUTPUT
          else
            echo "Release $RELEASE_TAG does not exist. Will create new release."
            echo "EXISTS=false" >> $GITHUB_OUTPUT
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: release-artifacts
      
      - name: Create Release
        id: create_release
        if: steps.check_release.outputs.EXISTS == 'false'
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ github.event.inputs.version }}
          name: v${{ github.event.inputs.version }}
          draft: true
          prerelease: false
          generate_release_notes: true
          files: |
            release-artifacts/VFMC-Windows/*.zip
            release-artifacts/VFMC-macOS-ARM/*.zip
            release-artifacts/VFMC-macOS-X86/*.zip
            
      - name: Upload assets to existing release
        if: steps.check_release.outputs.EXISTS == 'true'
        run: |
          cd release-artifacts
          find . -name "*.zip" -type f | while read -r file; do
            echo "Uploading $file to release v${{ github.event.inputs.version }}"
            gh release upload "v${{ github.event.inputs.version }}" "$file" --clobber
          done
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}