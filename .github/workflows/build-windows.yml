name: Windows Build

on:
  workflow_dispatch:

jobs:
  build-windows:
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.9'
          
      - name: Install Python dependencies
        run: |
          python -m venv .venv
          .\.venv\Scripts\Activate.ps1
          python -m pip install --upgrade pip
          pip install -e .
          
      - name: Set up Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: x86_64-pc-windows-msvc

      - name: Cache Rust dependencies
        uses: Swatinem/rust-cache@v2
        with:
          workspaces: "rust-src -> target"

      - name: Build Rust component
        run: |
          .\.venv\Scripts\Activate.ps1
          cd rust-src
          $env:RUSTFLAGS="-C target-feature=+avx2"
          maturin develop --release --target x86_64-pc-windows-msvc
          
      - name: Build Windows executable
        run: |
          .\.venv\Scripts\Activate.ps1
          pyinstaller win-x86.spec
          
      - name: Create distribution package
        run: |
          .\.venv\Scripts\Activate.ps1
          cd dist\win-x86
          $VERSION = (python -c "from importlib.metadata import version; print(version('vfmc'))")
          Compress-Archive -Path .\VFMC.exe -DestinationPath VFMC-v$VERSION-Windows.zip
          
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: VFMC-Windows
          path: dist/win-x86/*.zip
          
      - name: Check for GitHub Release
        id: check_release
        if: startsWith(github.ref, 'refs/tags/')
        shell: bash
        run: |
          TAG=${GITHUB_REF#refs/tags/}
          echo "Building from tag: $TAG"
          if gh release view $TAG &>/dev/null; then
            echo "release_exists=true" >> $GITHUB_OUTPUT
            echo "tag=$TAG" >> $GITHUB_OUTPUT
          else
            echo "release_exists=false" >> $GITHUB_OUTPUT
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Upload to existing GitHub Release
        if: steps.check_release.outputs.release_exists == 'true'
        shell: bash
        run: |
          TAG=${{ steps.check_release.outputs.tag }}
          for file in dist/win-x86/*.zip; do
            echo "Uploading $file to release $TAG"
            gh release upload $TAG "$file" --clobber
          done
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
