name: Publish all VFMC artifacts

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'PyPI version number (publish new version if empty)'
        required: false
        type: string

permissions:
  contents: write  # For creating releases and uploading assets
  id-token: write  # For PyPI trusted publishing

jobs:
  # Step 1: Publish vfmc_core to PyPI
  build-vfmc-core:
    name: Build vfmc_core wheels on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    if: github.event.inputs.version == ''
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]

    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Build wheels
        uses: PyO3/maturin-action@v1
        env:
          RUSTFLAGS: "-C target-feature=+avx2"
        with:
          command: build
          args: --release --out dist --find-interpreter
          sccache: 'true'
          working-directory: rust-src

      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheels-${{ matrix.os }}
          path: rust-src/dist

  build-vfmc-core-macos:
    name: Build vfmc_core wheels on macOS
    runs-on: macos-latest
    if: github.event.inputs.version == ''
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.9'

      - name: Build wheels for aarch64
        uses: PyO3/maturin-action@v1
        with:
          working-directory: rust-src
          command: build
          args: --release --out dist --target aarch64-apple-darwin --find-interpreter
          sccache: 'true'

      - name: Build wheels for x86_64
        uses: PyO3/maturin-action@v1
        env:
          RUSTFLAGS: "-C target-feature=+avx2"
        with:
          working-directory: rust-src
          command: build
          args: --release --out dist --target x86_64-apple-darwin --find-interpreter
          sccache: 'true'

      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheels-macos
          path: rust-src/dist

  build-vfmc-core-sdist:
    name: Build vfmc_core source distribution
    runs-on: ubuntu-latest
    if: github.event.inputs.version == ''
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Build sdist
        uses: PyO3/maturin-action@v1
        with:
          working-directory: rust-src
          command: sdist
          args: --out dist

      - name: Upload sdist
        uses: actions/upload-artifact@v4
        with:
          name: sdist
          path: rust-src/dist

  publish-vfmc-core:
    name: Publish vfmc_core to PyPI
    runs-on: ubuntu-latest
    if: github.event.inputs.version == ''
    needs: [build-vfmc-core, build-vfmc-core-macos, build-vfmc-core-sdist]
    steps:
      - uses: actions/checkout@v4

      - uses: actions/download-artifact@v4
        with:
          path: dist-artifacts

      - name: Publish to PyPI
        uses: PyO3/maturin-action@v1
        env:
          MATURIN_PYPI_TOKEN: ${{ secrets.PYPI_API_TOKEN }}
        with:
          command: upload
          args: --non-interactive --skip-existing "dist-artifacts/wheels*/*" "dist-artifacts/sdist/*"

  # Step 2: Publish vfmc to PyPI
  publish-vfmc:
    name: Publish vfmc to PyPI
    runs-on: ubuntu-latest
    if: github.event.inputs.version == ''
    environment: pypi
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.9'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build twine
      
      - name: Build package
        run: python -m build
      
      - name: Publish package
        uses: pypa/gh-action-pypi-publish@release/v1

  # Verify vfmc is available on PyPI
  verify-vfmc-pypi:
    name: Verify vfmc is available on PyPI
    runs-on: ubuntu-latest
    needs: publish-vfmc
    if: ${{ !failure() && !cancelled() }}
    steps:
      - name: Get version id
        id: get_version_id
        run: |
          if [ -n "${{ github.event.inputs.version }}" ]; then
            echo "Using provided version: ${{ github.event.inputs.version }}"
            echo "VERSION=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
          elif [ "$GITHUB_REF" = "${GITHUB_REF#refs/tags/v}" ]; then
            VERSION=${GITHUB_REF#refs/tags/v}
            echo "Using git tag: ${VERSION}"
            echo "VERSION=${VERSION}" >> $GITHUB_OUTPUT
          else
            echo "No version number found"
            exit 1
          fi

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y curl jq

      - name: Wait for package to be available on PyPI
        run: |
          VERSION="${{ steps.get_version_id.outputs.VERSION }}"
          echo "Waiting for vfmc v$VERSION to be available on PyPI..."
          # Maximum wait time: 5 minutes (30 tries * 10 seconds)
          for i in {1..30}; do
            if curl -s "https://pypi.org/pypi/vfmc/json" | jq -e '.releases | keys' | grep $VERSION > /dev/null; then
              echo "vfmc package is available on PyPI!"
              exit 0
            fi
            echo "Attempt $i: Package not yet available, waiting 10 seconds..."
            sleep 10
          done
          echo "Error: Package not available after maximum wait time"
          exit 1

  # Step 3: Build pre-compiled binaries
  build-windows:
    name: Build Windows executable
    runs-on: windows-latest
    needs: verify-vfmc-pypi
    if: ${{ !failure() && !cancelled() }}
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.9'
          
      - name: Install Python dependencies
        run: |
          python -m venv .venv
          .\.venv\Scripts\Activate.ps1
          python -m pip install --upgrade pip
          pip install -e .[dev]
          
      - name: Build Windows executable
        run: |
          .\.venv\Scripts\Activate.ps1
          pyinstaller win-x86.spec
          
      - name: Create distribution package
        run: |
          .\.venv\Scripts\Activate.ps1
          cd dist\win-x86
          $VERSION = if ("${{ github.event.inputs.version }}" -ne "") { "${{ github.event.inputs.version }}" } else { (python -c "from importlib.metadata import version; print(version('vfmc'))") }
          Compress-Archive -Path .\VFMC.exe -DestinationPath VFMC-v$VERSION-Windows.zip
          
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: VFMC-Windows
          path: dist/win-x86/*.zip

  build-macos-arm:
    name: Build macOS ARM executable
    runs-on: macos-latest
    needs: verify-vfmc-pypi
    if: ${{ !failure() && !cancelled() }}
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
      
      - name: Set up Python 3.9
        uses: actions/setup-python@v5
        with:
          python-version: '3.9'
          
      - name: Install Dependencies
        run: |
          python -m venv .venv
          . .venv/bin/activate
          python -m pip install --upgrade pip
          pip install .[dev]

      - name: Build ARM executable
        run: |
          . .venv/bin/activate
          pyinstaller macos-arm.spec
          VERSION=$([ -n "${{ github.event.inputs.version }}" ] && echo "${{ github.event.inputs.version }}" || make print-version)
          cd dist/macos-arm
          cp ../../resources/VFMC-Readme.txt .
          zip -q VFMC-v${VERSION}-Mac-ARM.zip -r VFMC-Readme.txt vfmc.app

      - name: Upload ARM build artifact
        uses: actions/upload-artifact@v4
        with:
          name: VFMC-macOS-ARM
          path: dist/macos-arm/*.zip

  # Step 4: Create GitHub release and upload assets
  create-release:
    name: Create release and upload assets
    runs-on: ubuntu-latest
    needs: [build-windows, build-macos-arm]
    if: ${{ !failure() && !cancelled() }}
    steps:
      - uses: actions/checkout@v4
      
      - name: Get version tag
        id: get_version_tag
        run: |
          if [ -n "${{ github.event.inputs.version }}" ]; then
            echo "Using provided version: ${{ github.event.inputs.version }}"
            echo "TAG=v${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
          elif [ "$GITHUB_REF" == "refs/tags/"* ]; then
            TAG=${GITHUB_REF#refs/tags/}
            echo "Using git tag: ${TAG}"
            echo "TAG=${TAG}" >> $GITHUB_OUTPUT
          else
            echo "No version number found"
            exit 1
          fi

      - name: Check if release exists
        id: check_release
        run: |
          RELEASE_TAG="${{ steps.get_version_tag.outputs.TAG }}"
          if gh release view "$RELEASE_TAG" &>/dev/null; then
            echo "Release $RELEASE_TAG already exists. Will only update assets."
            echo "EXISTS=true" >> $GITHUB_OUTPUT
          else
            echo "Release $RELEASE_TAG does not exist. Will create new release."
            echo "EXISTS=false" >> $GITHUB_OUTPUT
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: release-artifacts
      
      - name: Create Release
        id: create_release
        if: steps.check_release.outputs.EXISTS == 'false'
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.get_version_tag.outputs.TAG }}
          name: ${{ steps.get_version_tag.outputs.TAG }}
          draft: ${{ github.event.inputs.version != '' }}
          prerelease: false
          generate_release_notes: true
          files: |
            release-artifacts/VFMC-Windows/*.zip
            release-artifacts/VFMC-macOS-ARM/*.zip
            release-artifacts/VFMC-macOS-X86/*.zip
            
      - name: Upload assets to existing release
        if: steps.check_release.outputs.EXISTS == 'true'
        run: |
          cd release-artifacts
          find . -name "*.zip" -type f | while read -r file; do
            echo "Uploading $file to release ${{ steps.get_version_tag.outputs.TAG }}"
            gh release upload "${{ steps.get_version_tag.outputs.TAG }}" "$file" --clobber
          done
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}